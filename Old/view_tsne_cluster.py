#!/usr/bin/env python3

import pandas as pd
# import argparse

from snmcseq_utils import plot_tsne_labels

tsne_fs = ['./data/tsne/tsne_perp30_binc_mCH_human_combined_100000_summary_nmcc_v3.tsv',
			'./data/tsne/tsne_perp30_binc_mCG_human_combined_100000_summary_nmcc_v3.tsv',
			'./data/tsne/tsne_perp30_binc_mCHmCG_human_combined_100000_summary_nmcc_v3.tsv']
t_contexts = ['mCH', 'mCG', 'mCHmCG']

cluster_fs = ['./data/cluster/cluster_MB_v1_MB_EA_MB_EB/clusters_v1_binc_mCH_louvain.tsv',
			'./data/cluster/cluster_MB_v1_MB_EA_MB_EB/clusters_v2_binc_mCG_louvain.tsv',
			'./data/cluster/cluster_MB_v1_MB_EA_MB_EB/clusters_v3_binc_mCHmCG_louvain.tsv']
c_contexts = ['mCH', 'mCG', 'mCHmCG']


output_dir = './results/tsne_clusters'
title = 'tSNE of human MB_v1, MB_EA, and MB_EB samples \n (clusters generated by Louvain method on kNN graph)'

for t_context, tsne_f in zip(t_contexts, tsne_fs):
	df_tsne = pd.read_table(tsne_f, index_col='sample')
	for c_context, cluster_f in zip(c_contexts, cluster_fs):
		df_cluster = pd.read_table(cluster_f, index_col='sample')
		df_plot = pd.merge(df_tsne, df_cluster, left_index=True, right_index=True)
		output_f = output_dir + '/' + 'human_MB_v1_MB_EA_MB_EB_tsne_%s_cluster_%s.pdf' % (t_context, c_context) 
		title = 'Louvain clustering of human MB_v1, MB_EA, and MB_EB samples \n (tsne_%s_cluster_%s)' % (t_context, c_context) 
		plot_tsne_labels(df_plot, tc='cluster_ID', 
		    title=title, 
		    figsize=(10,10), legend_mode=1,
		    output=output_f, show=False,
		    )
		print('Saved to %s' % output_f)



# # argparser
# def create_parser():
#     """
#     """
#     parser = argparse.ArgumentParser()
#     parser.add_argument("-it", "--input_tsne", 
#         help="input tsne file", required=True)
#     parser.add_argument("-ic", "--input_cluster", 
#         help="input cluster file", required=True)
#     parser.add_argument("-o", "--output", 
#         help="output file (tsne cluster plot)", required=True)
#     parser.add_argument("-tc", "--tsne_color", default='cluster_ID', 
#         help="tsne label column", required=True)

#     parser.add_argument("-t", "--title", 
#         help="title", required=True)
#     return parser

# if __name__ == '__main__':
# 	parser = create_parser()
# 	args = parser.parse_args()
